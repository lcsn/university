<?xml version="1.0" encoding="UTF-8"?>
<html lang="de" xmlns="http://www.w3.org/1999/xhtml"
	xmlns:h="http://xmlns.jcp.org/jsf/html"
	xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
	xmlns:f="http://xmlns.jcp.org/jsf/core">
<h:head>
	<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
	<h:outputStylesheet name="css/map.css" />
	<script
		src="//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js" />
	<!--
	<script type="text/javascript" src="js/vendor/jquery-1.10.2.min.js" />
	<script src="http://code.jquery.com/jquery-1.10.2.min.js"></script>
	<script src="modernizr.min.js"></script>
	-->
	<script type="text/javascript">
				
		$(document).ready(function(){

			initZgame();
			
		})
		
		var mapCanvas;
		var mapContext;
		
		var zgameMap;
		
		var markedZgameField;
		var selectedZgameField;
		
		function initZgame() {
			mapCanvas = $("#mapCanvas")[0];
			mapContext = mapCanvas.getContext("2d");

			mapCanvas.addEventListener("mousemove", onMouseMove, false);

			mapCanvas.addEventListener("click", onMouseClick, false);

			//mapCanvas.onclick = findCell;
			
			// Set the style properties.
			mapContext.fillStyle   = '#fff';
			mapContext.strokeStyle = '#000';
			mapContext.lineWidth   = 1;
			
			// Parameters to constructor are cell-size, tiledMap-height, tiledMap-width, tiledMap-top, tiledMap-left
			zgameMap = new ZgameMap(100, 5, 5, 0, 0);

			zgameMap.draw(mapContext);
			
			zgameMap.addUnit(new Unit('S'), 0, 1, mapContext);
			zgameMap.addUnit(new Unit('W'), 2, 4, mapContext);
			zgameMap.addUnit(new Unit('W'), 2, 2, mapContext);
		}
		
		function onMouseClick(e) {
			var rect = mapCanvas.getBoundingClientRect();
			var x = e.clientX - rect.left;
			var y = e.clientY - rect.top;
			var zgameField = zgameMap.findField(x, y);
			zgameField.select(mapContext);
			selectedZgameField = zgameField;
			var message;
			if(zgameField.getUnit() != null) {
				message = '<b>Einheit:</b> ' + zgameField.getUnit().getName();
			}
			else {
				message = '<b>Einheit:</b> NONE';
			}
			writeUnitInfo(message);
		}
		
		function onMouseMove(e) {
			var rect = mapCanvas.getBoundingClientRect();
			var x = e.clientX - rect.left;
			var y = e.clientY - rect.top;
			var zgameField = zgameMap.findField(x, y);
			if (zgameField != null) {
				//if(zgameField.getId() != markedZgameField.getId()) {
				
				if(markedZgameField == null) {
					markedZgameField = zgameField;
				}
				if(zgameField.gridX != markedZgameField.gridX || zgameField.gridY != markedZgameField.gridY) {
					markedZgameField.unmark(mapContext);
					markedZgameField = zgameField;
				}
				
				zgameField.mark(mapContext);
		        
				var message = '<b>Hex position:</b> ' + zgameField.gridX + ', ' + zgameField.gridY;
		        writeHexCoords(message);
			}
			
			var message = '<b>Mouse position:</b> ' + x + ', ' + y;
	        writeCoords(message);
		}
		
		function Unit(aName) {
			
			var name = aName;
			
			this.getName = function() {
				return name;				
			}
			
		}

		function ZgameField(aSize, aX, aY) {
			
			var TANSIXTY = Math.tan(2*Math.PI/360*60);
			
			var marked = false;
			var selected = false;
			
			var x = aX;
			var y = aY;
			
			var size = aSize;
			var a = size/4;
			var h = size/4*2;
			var o = TANSIXTY*a;
			
			var unit;
			
			this.getUnit = function() {
				return unit;
			}
			
			this.setUnit = function(aUnit) {
				unit = aUnit;
			}
			
			this.recalc = function() {
				a = size/4;
				h = size/4*2;
				o = TANSIXTY*a;
			}
			
			this.reset = function() {
				size += 10;
				x -= 5;
				this.recalc();
			}
			
			this.setAsMarker = function() {
				size -= 10;
				x += 5;
				this.recalc();
			}
			
			this.getA = function() {
				return a;
			}
			
			this.getH = function() {
				return h;	
			}
						
			this.getO = function() {
				return o;
			}
			
			this.isMarked = function() {
				return marked;
			}
			
			this.setMarked = function(aMarked) {
				marked = aMarked;
			}
			
			this.isSelected = function() {
				return selected;
			}
			
			this.setSelected = function(aSelected) {
				selected = aSelected;
			}
			
			this.select = function(context) {
				if(!selected) {
					context.save();
					//context.fillStyle = 'rgba('+255+','+0+','+0+','+(0.5)+')';
					context.strokeStyle = '#0f0';
					context.lineWidth = 3;
					this.setAsMarker();
					this.draw(context);
					this.setSelected(true);
					this.reset();
					context.restore();
				}
			}
			
			this.unselect = function(context) {
				if(selected) {
					this.draw(context);
					this.mark(context);
					this.setSelected(false);
				}
			}
			
			this.mark = function(context) {
				if(!marked &amp;&amp; !selected) {
					context.save();
					//context.fillStyle = 'rgba('+255+','+0+','+0+','+(0.5)+')';
					context.strokeStyle = '#f00';
					context.lineWidth = 3;
					this.setAsMarker();
					this.draw(context);
					this.setMarked(true);
					this.reset();
					context.restore();
				}
			}
			
			this.unmark = function(context) {
				if(marked &amp;&amp; !selected) {
					this.draw(context);
					this.setMarked(false);
				}
			}
			
			this.draw = function(context) {
						context.beginPath();
						context.moveTo(x, y);
						context.lineTo(x+a, y-o);
						context.lineTo(x+a+h, y-o);
						context.lineTo(x+a+a+h, y);
						context.lineTo(x+a+h, y+o);
						context.lineTo(x+a, y+o);
						context.lineTo(x, y);
						context.fill();
						context.stroke();
						context.closePath();
						if(unit != null) {
							context.save();
							context.fillStyle = "black";
							context.font = "bold 16px Arial";
							context.fillText(unit.getName(), x+o, y);
							context.restore();
						}
			}
			
			this.contains = function(u, v) {
				var retval = false;

				// Box in centre of hexagon
				var inBox = u >= (x+a) &amp; u &lt;= (x+a+h) &amp; v >= (y-o) &amp; v &lt;= (y+o);

				// Triangle to the left of box
				var inLeftTriangle = u >= x &amp; u &lt;= x + a &amp; v >= y - (u - x) * TANSIXTY &amp; v &lt;= y + (u - x) * TANSIXTY;

				// Triangle to the right of box
				var inRightTriangle = u >= x + a + h &amp; u &lt;= x + a + h + a &amp; v >= y - (x + a + h + a - u) * TANSIXTY &amp; v &lt;= y + (x + a + h + a - u) * TANSIXTY;

				if (inLeftTriangle || inBox || inRightTriangle) {
					retval = true;
				}

				return retval;
			}
			
		}
		
		function ZgameMap(aFieldSize, aWidth, aHeight, aLeft, aTop) {
			
			var tiledMap = new Array();
			var fieldSize = aFieldSize;
			var width = aWidth;
			var height = aHeight;
			
			var left = aLeft;
			var top = aTop;
			
			// Create a dummy hexagon to get offset-values for positioning
			var h = new ZgameField(fieldSize, 0, 0);
			var horizOffset = h.getH()*2+h.getA()*2;
			var verticOffset = h.getO();
			var evenLineOffset = h.getH()+h.getA();

			// Create the tiledMap in memory
			for(var i = 0; i &lt; height; i++) {
				tiledMap[i] = new Array();
				for(var j = 0; j &lt; width; j++) {
					if (i%2 == 0) { // Offset every other row to give tessallation
						tiledMap[i][j] = new ZgameField(fieldSize, (j*horizOffset+evenLineOffset)+left, ((i+1)*verticOffset)+top);
					} else {
						tiledMap[i][j] = new ZgameField(fieldSize, (j*horizOffset)+left, ((i+1)*verticOffset)+top);
					}
				}
			}
			
			this.addUnit = function(aUnit, aY, aX, context) {
				tiledMap[aX][aY].setUnit(aUnit);
				tiledMap[aX][aY].draw(context);
			}

			// Given a 2D drawing context on an HTML5 canvas tag, draw the tiledMap
			this.draw = function(context) {
				for(var i = 0; i &lt; height; i++) {
					for(var j = 0; j &lt; width; j++) {
						tiledMap[i][j].draw(context);
					}
				}
			}

			// Find the zgameField containing point (u, v)
			this.findField = function(u, v) {
				var retval = null;

				for(var i = 0; i &lt; height; i++) {
					for(var j = 0; j &lt; width; j++) {
						if (tiledMap[i][j].contains(u, v))  {
							retval = tiledMap[i][j];

							// Add tiledMap coordinates of cell to returned object
							retval.gridX = j;
							retval.gridY = i;
						}
					}
				}

				return retval;
			}
			
		}
		
		function writeCoords(message) {
			var coords = $("#coords")[0];
			coords.innerHTML = message;
		}
		
		function writeHexCoords(message) {
			var hexCoords = $("#hexCoords")[0];
			hexCoords.innerHTML = message;
		}
		
		function writeUnitInfo(message) {
			var unitInfo = $("#unitInfo")[0];
			unitInfo.innerHTML = message;
		}
		
		</script>
</h:head>
<h:body>
	<div id="container">
		<div id="header">
			<h1>Zgame - Menschen. Zombies. Ende.</h1>
			<div style="float: right;">Join it. Play it. Love it.</div>
			<br />
			<div style="float: right;">- Lars</div>
		</div>
		<div id="content-container">
			<div align="center">
				<H1>MAP_TEST_1</H1>
				<h:form id="map_test_1">
					<h:messages id="msgs" errorStyle="color:red;" />

					<output id="coords" style="float:left;"><b>Mouse position:</b> n.a, n.a</output>
					<br />
					<output id="hexCoords" style="float:left;"><b>Hex position:</b> n.a, n.a</output>
					<br />
					<output id="unitInfo" style="float:left;"><b>Einheit:</b> n.a</output>
					<br />
					<canvas id="mapCanvas" height="800" width="1200">Upgrade your browser!</canvas>


				</h:form>
			</div>
		</div>
		<div id="footer">
			<footer>
				<p>
					<br />SPREAD OR SURVIVE.<br />
				</p>
				<div>Copyright Â© Site Lars-Christian Simon, 2013</div>
			</footer>
		</div>
	</div>
</h:body>
</html>